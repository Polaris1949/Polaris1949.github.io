# 3 术语和定义 ![![intro.defs]!]! {#title}

本文为博主原创文章，未经博主允许不得转载。

------------------------------------------------

^1^ 由于本文档的目的，ISO/IEC 2382-1:1993中给出的术语和定义，ISO 80000-2:2009中给出的术语、定义和符号，以及下列内容被运用。
^2^ ISO和IEC在以下地址维护术语数据库用于标准化：
^(2.1)^ ——IEC在线电工词汇：http://www.electropedia.org/
^(2.2)^ ——ISO在线浏览平台：http://www.iso.org/obp
^3^ 第20.3节定义了仅在第20至33章和附录D中使用的附加术语。
^4^ 仅在文档的一小部分中使用的术语被定义在使用它们的地方，并在它们被定义的地方用斜体表示。

------------------------------------------------

## 3.1 访问 ![![defns.access]!]! {#s1}
!<!执行时动作!>! 读取或修改对象的值

------------------------------------------------

## 3.2 实参 ![![defns.argument]!]! {#s2}
!<!函数调用表达式!>! 由括号限定的逗号分隔表中的表达式（8.2.2）

------------------------------------------------

## 3.3 实参 ![![defns.argument.macro]!]! {#s3}
!<!函数类似宏!>! 括号内逗号分隔列表中的预处理标记序列（19.3）

------------------------------------------------

## 3.4 实参 ![![defns.argument.throw]!]! {#s4}
!<!抛出表达式!>! `throw`的操作量（8.17）

------------------------------------------------

## 3.5 实参 ![![defns.argument.templ]!]! {#s5}
!<!模板实例化!>! 常量表达式，由角括号限定的逗号分隔列表中的常量表达式、类型ID或ID表达式（17.3）

------------------------------------------------

## 3.6 阻塞 ![![defns.block]!]! {#s6}
阻塞的线程执行在它越过阻塞操作可以继续执行前，正在等待某些条件（不让实现执行其执行步骤）成立

------------------------------------------------

## 3.7 条件性支持 ![![defns.cond.supp]!]! {#s7}
实现不需要支持的程序构造
【注：每个实现用文档记录不支持的所有条件性支持的构造。——注结束】

------------------------------------------------

## 3.8 诊断消息 ![![defns.diagnostic]!]! {#s8}
属于实现定义的实现的输出消息的子集的消息

------------------------------------------------

## 3.9 动态类型 ![![defns.dynamic.type]!]! {#s9}
!<!广义左值!>! 广义左值引用的最深派生对象（4.5）的类型
【例：如果指针（113.1）`p`的静态类型是“类`B`的指针”，且指向从`B`派生的类`D`对象（第13章），则表达式`*p`的动态类型是“`D`”。引用（113.2）被相似对待。——例结束】

------------------------------------------------

## 3.10 动态类型 ![![defns.dynamic.type.prvalue]!]! {#s10}
!<!纯右值!>! 纯右值表达式的静态类型

------------------------------------------------

## 3.11 非法程序 ![![defns.ill.formed]!]! {#s11}
不符合语法（3.29）的程序

------------------------------------------------

## 3.12 实现定义行为 ![![defns.impl.defined]!]! {#s12}
对于合法程序构造和正确数据，取决于实现和每个实现文档的行为

------------------------------------------------

## 3.13 实现限制 ![![defns.impl.limits]!]! {#s13}
实现对程序的限制

------------------------------------------------

## 3.14 区域特定行为 ![![defns.locale.specific]!]! {#s14}
取决于国籍、文化和语言的区域惯例的每个实现用文档记录的行为
