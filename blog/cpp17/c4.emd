# 4 总则 ![![intro]!]! {#title}

本文为博主原创文章，未经博主允许不得转载。

------------------------------------------------

## 4.1 实现依从性 ![![intro.compliance]!]! {#s1}
^1^ *可诊断规则* 的集合由本标准中的所有句法和语义规则组成，包含明确标记的“不要求诊断”或描述为“未定义行为”的规则除外。
^2^ 虽然本国际标准只对C++实现提出了要求，但如果这些要求被表述为程序、程序片段或程序执行的要求，那么这些要求通常更容易理解。这种要求具有以下含义：
^(2.1)^ ——如果一个程序不违反本标准中的规则，一致的实现应在其资源范围内接受并正确执行[^2]该程序。
^(2.2)^ ——如果程序包含违反任何可诊断规则或在本标准中描述为“有条件支持”的构造发生，当实现不支持该构造时，一致的实现应发出至少一个诊断消息。
^(2.3)^ ——如果程序包含违反不要求诊断的规则，本国际标准不要求关于该程序的实现。
【*注：* 在模板实参推导和替换过程中，其他上下文中要求诊断的某些构造被不同对待；参见[17.8.2](c17#s8.2)。*——注结束*】
^3^ 对于类和类模板，库章节指定部分定义。私有成员（第[14](c14)章）未指定，但每个实现应提供它们以根据库章节中的描述完成定义。
^4^ 对于函数、函数模板、对象和值，库章节规定声明。实现应提供与库章节中描述一致的定义。
^5^ 在库中定义的名称具有命名空间范围（[10.3](c10#s3)）。C++翻译单元（[5.2](c5#s2)）通过包含适当的标准库头文件（[19.2](c19#s2)）来获得对这些名称的访问。
^6^ 库中的模板、类、函数和对象具有外部链接（[6.5](c6#s5)）。必要时，实现提供标准库实体的定义，同时结合翻译单元以形成完整的C++程序（[5.2](c5#s2)）。
^7^ 实现有两种定义：*托管实现* 和 *独立实现*。对于托管实现，本国际标准定义了可用库的集合。独立实现是一种在没有操作系统的好处的情况下执行的方法，它有一个包含某些语言支持库（[20.5.1.3](c20#s5.1.3)）的实现定义的库的集合。
^8^ 一致的实现可以具有扩展（包括附加库函数），前提是它们不改变任何合法程序的行为。实现要求根据本国际标准诊断非法使用这种扩展的程序。然而，他们可以编译和执行这种程序。
^9^ 每个实现应包括文档，标识所有不支持的有条件支持的构造，并定义所有区域特定的特性。[^3]

[^2]: ~(2)~“正确执行”可以包括未定义的行为，这取决于正在处理的数据；参见第[3](c3)章和第[4.6](#s6)节。
[^3]: ~(3)~本文档还定义了实现定义行为；参见第[4.6](#s6)节。

------------------------------------------------

## 4.2 文档结构 ![![intro.structure]!]! {#s2}
^1^ 第[5](c5)到[19](c19)章描述了C++编程语言。该描述包括详细语法规范，以第4.3节中描述的形式描述。为方便起见，附录A重复所有这种语法规范。
^2^ 第[21](c21)至[33](c33)章和附录[D](a3)（库章节）描述了C++标准库。该描述包括对构成库的实体和宏的详细描述，以第[20](c20)章中描述的形式描述。
^3^ 附录[B](a1)推荐一致性实现的容量下限。
^4^ 附录[C](a2)总结了C++第一次发的描述以来的演变，并详细解释了C++和C之间的区别。C++的某些特性仅为兼容性的目的而存在；附件[D](a3)描述了这些特性。
^5^ 在整个文档中，每个示例都由“【*例：*”引入，并由“*——例结束*】”终止。每个注释都由“【*注：*”引入，并由“*——注结束*】”终止。示例和注释可以嵌套。
